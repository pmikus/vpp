name: vpp-build-test-merge
# This workflow can be triggered ONLY by other workflows (workflow_call)

on:
  # Invocation from other workflows
  workflow_call:
    inputs:
      is-merge:
        description: 'Merge first, then run build + test phases'
        required: false
        default: false
        type: boolean
      build-type:
        description: 'Build type selection (debug, release, or both)'
        required: false
        default: 'release'
        type: string
      gerrit-branch:
        description: 'Branch to verify (master, stable/YYMM)'
        required: true
        default: 'master'
        type: string
      gerrit-url:
        description: 'Gerrit change URL'
        required: true
        type: string
      gerrit-refspec:
        description: 'Gerrit change refspec'
        required: true
        type: string

defaults:
  run:
    shell: bash

permissions:
  contents: read
  actions: read

jobs:
  vpp-verify:
    runs-on:
      - self-hosted
      - nomad
      - fdio:arch=${{ matrix.executor_arch }}
      - fdio:class=builder
      - fdio:namespace=sandbox
      - fdio:os=${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu2404', 'ubuntu2204', 'debian12']
        executor_arch: ['x86_64', 'aarch64']
        build-type: ${{ inputs.build-type == 'both' && fromJson('["debug", "release"]') || fromJson(format('["{0}"]', inputs.build-type)) }}
        exclude:
          # Exclude debian12 on aarch64 for all builds
          - os: 'debian12'
            executor_arch: 'aarch64'
          # Exclude non-ubuntu2204 OS for debug builds
          - build-type: 'debug'
            os: 'ubuntu2404'
          - build-type: 'debug'
            os: 'debian12'
          # Exclude aarch64 architecture for debug builds
          - build-type: 'debug'
            executor_arch: 'aarch64'

    env:
      CACHE_DATE: ${{ github.run_id }}
      CCACHE_DIR: /scratch/ccache/${{ matrix.os }}-${{ matrix.executor_arch }}
      DOCKER_TEST: 1
      EXECUTOR_ARCH: ${{ matrix.executor_arch }}
      JOB_NAME: ${{ github.job }}-${{ inputs.gerrit-branch == 'master' && 'master' || inputs.gerrit-branch == 'stable/2502' && '2502' || '2506' }}-${{ matrix.os }}-${{ matrix.executor_arch }}
      MAKE_PARALLEL_JOBS: 16
      MAKE_TEST_OS: ${{ matrix.os == 'ubuntu2204' && 'ubuntu-22.04' || matrix.os == 'ubuntu2404' && 'ubuntu-24.04' || 'debian-12' }}
      MAKE_TEST_MULTIWORKER_OS: 'debian-12'
      SHM_SIZE: ${{ matrix.executor_arch == 'aarch64' && '4096M' || '2048M' }}
      STREAM: ${{ inputs.gerrit-branch == 'master' && 'master' || inputs.gerrit-branch == 'stable/2502' && '2502' || '2506' }}
      TEST_RETRIES: 3
      VPPAPIGEN_TEST_OS: ${{ matrix.os == 'ubuntu2204' && 'ubuntu-22.04' || matrix.os == 'ubuntu2404' && 'ubuntu-24.04' || 'debian-12' }}
      VPP_SRC_DIR: /scratch/docker-build/vpp
      WORKSPACE: ${{ github.workspace }}

    steps:
      - name: "Show Nomad Attributes"
        uses: pmikus/.github/.github/actions/show-nomad-attributes@main

      - name: "Show Nomad Dockerfile"
        uses: pmikus/.github/.github/actions/show-nomad-dockerfile@main

      - name: Restore VPP Gerrit Environment Variables
        uses: pmikus/.github/.github/actions/gerrit-env-vars-restore@main
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Gerrit Checkout
        # yamllint disable-line rule:line-length
        uses: lfit/checkout-gerrit-change-action@54d751e8bd167bc91f7d665dabe33fae87aaaa63 # v0.9
        with:
          gerrit-refspec: ${{ inputs.gerrit-refspec }}
          gerrit-project: 'vpp'
          gerrit-url: ${{ inputs.gerrit-url }}
          # delay: "30s"
          ref: refs/heads/${{ inputs.gerrit-branch }}

      - name: Setup Environment
        uses: pmikus/.github/.github/actions/setup_executor_env@main

      - name: Setup Docker VPP Runtime Environment
        run: |
          set -euxo pipefail
          if [ -n ${DOCKER_TEST} ] ; then
            # for 4 cores:
            # framework.VppTestCase.MIN_REQ_SHM + (num_cores * framework.VppTestCase.SHM_PER_PROCESS)
            # 1073741824 == 1024M (1073741824 >> 20)
            MEM=1024M
            if [[ ${EXECUTOR_ARCH} == 'aarch64' ]]
            then
                # arm build are running with 16 cores, empirical evidence shows
                # that 2048M is enough
                MEM=2048M
            fi
            sudo mount -o remount /dev/shm -o size=${MEM} || true
                  echo "/dev/shm remounted with size='${MEM}'"
          fi

      - name: Maybe Merge Gerrit Change
        if: ${{ inputs.is-merge == 'true' }}
        run: |
          set -euxo pipefail
          echo "--- TBD: Merging change before build/test phases ---"

      - name: Install VPP external dependencies
        uses: pmikus/.github/.github/actions/vpp-install-ext-deps@main

      - name: Verify VPP Build and Test
        timeout-minutes: 60
        run: |
          set -euxo pipefail

          line="*************************************************************************"
          # Don't build anything if this is a merge job being run when
          # the git HEAD id is not the same as the Gerrit New Revision id.
          #if [[ ${JOB_NAME} == *merge* ]] && [ -n "${GERRIT_NEWREV:-}" ] &&
          #       [ "$GERRIT_NEWREV" != "$GIT_COMMIT" ] ; then
          #    echo -e "\n$line\nSkipping build. A newer patch has been merged.\n$line\n"
          #    exit 0
          #fi

          OS_ID=$(grep '^ID=' /etc/os-release | cut -f2- -d= | sed -e 's/\"//g')
          OS_VERSION_ID=$(grep '^VERSION_ID=' /etc/os-release | cut -f2- -d= | sed -e 's/\"//g')
          OS_ARCH=$(uname -m)
          MAKE_PARALLEL_FLAGS="${MAKE_PARALLEL_FLAGS:-}"
          MAKE_PARALLEL_JOBS="${MAKE_PARALLEL_JOBS:-}"
          MAKE_TEST_OS="${MAKE_TEST_OS:-ubuntu-22.04}"
          MAKE_TEST_MULTIWORKER_OS="${MAKE_TEST_MULTIWORKER_OS:-debian-12}"
          VPPAPIGEN_TEST_OS="${VPPAPIGEN_TEST_OS:-${MAKE_TEST_OS}}"
          BUILD_RESULT="SUCCESSFULLY COMPLETED"
          BUILD_ERROR=""
          RETVAL="0"

          if [ -n "${MAKE_PARALLEL_FLAGS}" ] ; then
            echo "Building VPP. Number of cores for build set with" \
                 "MAKE_PARALLEL_FLAGS='${MAKE_PARALLEL_FLAGS}'."
          elif [ -n "${MAKE_PARALLEL_JOBS}" ] ; then
            echo "Building VPP. Number of cores for build set with" \
                 "MAKE_PARALLEL_JOBS='${MAKE_PARALLEL_JOBS}'."
          else
              echo "Building VPP. Number of cores not set," \
                   "using build default ($(grep -c ^processor /proc/cpuinfo))."
          fi

          make_build_test() {
              if [ -f extras/scripts/build_static_vppctl.sh ]; then
                  if ! extras/scripts/build_static_vppctl.sh ; then
                      BUILD_ERROR="FAILED 'extras/scripts/build_static_vppctl.sh'"
                      return
                  fi
              fi
              if ! make UNATTENDED=yes test-dep ; then
                  BUILD_ERROR="FAILED 'make test-dep'"
                  return
              fi
              if ! make UNATTENDED=yes pkg-verify ; then
                  BUILD_ERROR="FAILED 'make pkg-verify'"
                  return
              fi
              if [ -n "${MAKE_PARALLEL_JOBS}" ] ; then
                  TEST_JOBS="${MAKE_PARALLEL_JOBS}"
                  echo "Testing VPP with ${TEST_JOBS} cores."
              else
                  TEST_JOBS="auto"
                  echo "Testing VPP with automatically calculated number of cores. " \
                       "See test logs for the exact number."
              fi
              if grep -q "${OS_ID}-${OS_VERSION_ID}" <<< "${VPPAPIGEN_TEST_OS}"; then
                  if ! src/tools/vppapigen/test_vppapigen.py ; then
                      BUILD_ERROR="FAILED src/tools/vppapigen/test_vppapigen.py"
                      return
                  fi
              fi
              if grep -q "${OS_ID}-${OS_VERSION_ID}" <<< "${MAKE_TEST_OS}"; then
                  if ! make COMPRESS_FAILED_TEST_LOGS=yes TEST_JOBS="$TEST_JOBS" RETRIES=3 test ; then
                      BUILD_ERROR="FAILED 'make test'"
                      return
                  fi
              else
                  echo "Skip running 'make test' on ${OS_ID}-${OS_VERSION_ID}"
              fi
              if grep -q "${OS_ID}-${OS_VERSION_ID}" <<< "${MAKE_TEST_MULTIWORKER_OS}"; then
                  if git grep -q VPP_WORKER_CONFIG ; then
                      if ! make VPP_WORKER_CONFIG="workers 2" COMPRESS_FAILED_TEST_LOGS=yes \
                              RETRIES=3 TEST_JOBS="$TEST_JOBS" test ; then
                          BUILD_ERROR="FAILED 'make test' with VPP_WORKER_CONFIG='workers 2'"
                          return
                      else
                          echo -e "\n* VPP ${OS_ID^^}-${OS_VERSION_ID}-${OS_ARCH^^}" \
                                  "MULTIWORKER MAKE TEST SUCCESSFULLY COMPLETED\n"
                      fi
                  elif git grep -q VPP_WORKER_COUNT ; then
                      if ! make VPP_WORKER_COUNT="2" COMPRESS_FAILED_TEST_LOGS=yes \
                              RETRIES=3 TEST_JOBS="$TEST_JOBS" test ; then
                          BUILD_ERROR="FAILED 'make test' with VPP_WORKER_CONFIG='workers 2'"
                          return
                      else
                          echo -e "\n* VPP ${OS_ID^^}-${OS_VERSION_ID}-${OS_ARCH^^}" \
                                  "MULTIWORKER MAKE TEST SUCCESSFULLY COMPLETED\n"
                      fi
                  else
                      echo "Skip running MULTIWORKER MAKE TEST on ${OS_ID}-${OS_VERSION_ID}"
                  fi
              else
                  echo "Skip running MULTIWORKER MAKE TEST on ${OS_ID}-${OS_VERSION_ID}"
              fi
          }

          if [ "${DRYRUN,,}" != "true" ] ; then
              make_build_test
          fi
          if [ -n "$BUILD_ERROR" ] ; then
              BUILD_RESULT="$BUILD_ERROR"
              RETVAL="1"
          fi
          echo -e "\n$line\n* VPP ${OS_ID^^}-${OS_VERSION_ID}-${OS_ARCH^^}" \
                  "BUILD $BUILD_RESULT\n$line\n"
          exit $RETVAL

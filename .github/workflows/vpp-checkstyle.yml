name: vpp-checkstyle

# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
    inputs:
      GERRIT_BRANCH:
        description: "Branch that change is against"
        required: true
        type: string
      GERRIT_CHANGE_ID:
        description: "The ID for the change"
        required: true
        type: string
      GERRIT_CHANGE_NUMBER:
        description: "The Gerrit number"
        required: true
        type: string
      GERRIT_CHANGE_URL:
        description: "URL to the change"
        required: true
        type: string
      GERRIT_EVENT_TYPE:
        description: "Type of Gerrit event"
        required: true
        type: string
      GERRIT_PATCHSET_NUMBER:
        description: "The patch number for the change"
        required: true
        type: string
      GERRIT_PATCHSET_REVISION:
        description: "The revision sha"
        required: true
        type: string
      GERRIT_PROJECT:
        description: "Project in Gerrit"
        required: true
        type: string
      GERRIT_REFSPEC:
        description: "Gerrit refspec of change"
        required: true
        type: string

defaults:
  run:
    shell: bash

permissions:
  contents: read
  actions: read

concurrency:
  # yamllint disable-line rule:line-length
  group: required-verify-${{ github.workflow }}-${{ github.event.inputs.GERRIT_BRANCH }}-${{ github.event.inputs.GERRIT_CHANGE_ID || github.run_id }}
  cancel-in-progress: true

jobs:
  checkstyle:
    name: Checkstyle on ${{ matrix.os }} ${{ matrix.executor_arch }}
    runs-on:
      - self-hosted
      - nomad
      - fdio:arch=${{ matrix.executor_arch }}
      - fdio:class=builder
      - fdio:namespace=sandbox
      - fdio:os=${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu2404]
        executor_arch: [x86_64]

    steps:
      - name: Gerrit Checkout
        # yamllint disable-line rule:line-length
        uses: lfit/checkout-gerrit-change-action@54d751e8bd167bc91f7d665dabe33fae87aaaa63 # v0.9
        with:
          gerrit-refspec: ${{ github.event.inputs.GERRIT_REFSPEC }}
          gerrit-project: ${{ github.event.inputs.GERRIT_PROJECT }}
          gerrit-url: ${{ github.event.inputs.GERRIT_CHANGE_URL }}
          delay: "30s"
          ref: refs/heads/${{ github.event.inputs.GERRIT_BRANCH }}

      - name: Retrieve GIT commit message
        # yamllint disable-line rule:line-length
        uses: lfit/releng-reusable-workflows/.github/actions/git-commit-message-action@main

      - name: Setup Environment
        uses: pmikus/.github/.github/actions/setup_executor_env@main

      - name: Set Gerrit Environment Variables
        id: set-gerrit-vars
        run: |
          set -euxo pipefail
          echo "branch=${{ github.event.inputs.GERRIT_BRANCH }}" >> $GITHUB_OUTPUT

          # Create workflow outputs for downstream workflows
          mkdir -p workflow-outputs
          echo "${{ github.event.inputs.GERRIT_BRANCH }}" > workflow-outputs/branch
          echo "${{ github.event.inputs.GERRIT_REFSPEC }}" > workflow-outputs/refspec
          echo "${{ github.event.inputs.GERRIT_CHANGE_URL }}" > workflow-outputs/url

      - name: Upload Workflow Outputs
        uses: actions/upload-artifact@v4
        with:
          name: workflow-outputs-${{ matrix.os }}-${{ matrix.executor_arch }}
          path: workflow-outputs/

      - name: Run Checkstyle Scripts
        run: |
          set -euxo pipefail
          LINE="*******************************************************************"
          BUILD_EXT_DIR="build/external"
          MATRIX_FILE="$BUILD_EXT_DIR/mlx_rdma_dpdk_matrix.txt"
          PKGS_DIR="$BUILD_EXT_DIR/packages"

          if git show --stat | grep -q "$MATRIX_FILE" ; then
              RDMA_CORE_VERSION="$(grep rdma-core_version $PKGS_DIR/rdma-core.mk | grep -v '(' | mawk '{print $3}')"
              DPDK_VERSION="$(grep dpdk_version $PKGS_DIR/dpdk.mk | grep -v '(' | mawk '{print $3}')"
              CURRENT_MATRIX="rdma=$RDMA_CORE_VERSION dpdk=$DPDK_VERSION"
              if grep -q "$CURRENT_MATRIX" "$MATRIX_FILE"; then
                  echo -e "$LINE\n* DPDK/RDMA-CORE matrix file update successfully verified\n$LINE"
              else
                  echo -e "$LINE\n* ERROR: 'rdma=$RDMA_CORE_VERSION dpdk=$DPDK_VERSION' not found in $MATRIX_FILE!\n$LINE"
                  exit 1
              fi
          fi

          if grep -qE '^checkstyle:' Makefile
          then
              make UNATTENDED=yes install-deps checkstyle
          else
              echo "Can't find checkstyle target in Makefile - skipping checkstyle"
          fi

      - name: Run Test Checkstyle Scripts
        run: |
          set -euxo pipefail
          if grep -qE '^test-checkstyle:' Makefile
          then
              make test-checkstyle
          else
              echo "Can't find test-checkstyle target in Makefile - skipping test-checkstyle"
          fi

      - name: Run API Checkstyle Scripts
        run: |
          set -euxo pipefail
          VPP_CRC_CHECKER="extras/scripts/crcchecker.py"
          VPP_CRC_CHECKER_CMD="$VPP_CRC_CHECKER --check-patchset"

          if [ -f $VPP_CRC_CHECKER ]; then
              # API checker complains if the git repo is not clean.
              # Help diagnosing those issues easier
              git --no-pager diff
              echo "Running $VPP_CRC_CHECKER_CMD"
              if $VPP_CRC_CHECKER_CMD; then
                  echo "API check successful"
              else
                  RET_CODE=$?
                  echo "API check failed: ret code $RET_CODE; please read https://wiki.fd.io/view/VPP/ApiChangeProcess and discuss with ayourtch@gmail.com if unsure how to proceed"
                  echo "::error file=.ci/scripts/vpp/crcchecker.py,line=1::API check FAILED for $GITHUB_REF. See run: https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
                  exit $RET_CODE
              fi
          else
              echo "Cannot find $VPP_CRC_CHECKER - skipping API compatibility check"
          fi

      - name: Run Commit Message Checkstyle
        run: |
          set -euxo pipefail
          if [ -f extras/scripts/check_commit_msg.sh ] ; then
              echo "Running extras/scripts/check_commit_msg.sh"
              extras/scripts/check_commit_msg.sh
          else
              echo "Cannot find cat extras/scripts/check_commit_msg.sh - skipping commit message check"
          fi

      - name: Run Docs Spell
        run: |
          set -euxo pipefail
          if grep -qE '^docs\-%' Makefile && grep -qE '^spell' docs/Makefile
          then
              make docs-spell
          else
              echo "Can't find docs-spell target in Makefile - skipping docs-spell"
          fi

      - name: Archive Checkstyle Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkstyle-logs-${{ steps.set-gerrit-vars.outputs.branch }}-${{ matrix.os }}
          path: logs/

      - name: Report Success
        if: success()
        run: |
          echo "Checkstyle passed for ${{ steps.set-gerrit-vars.outputs.branch }} on ${{ matrix.os }}"
          echo "::notice::Checkstyle workflow completed successfully! Workflow ID: ${{ github.run_id }}, Name: ${{ github.workflow }}, Repository: ${{ github.repository }}, Branch: ${{ steps.set-gerrit-vars.outputs.branch }}"

  consolidate-outputs:
    name: Consolidate Workflow Outputs
    needs: checkstyle
    runs-on: ubuntu-latest
    if: always()  # Run even if checkstyle job has failures, as long as artifacts were uploaded
    steps:
      - name: Download Matrix Artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: workflow-outputs-*
          merge-multiple: true

      - name: Debug Downloaded Artifacts
        run: |
          set -euxo pipefail
          echo "=== Current directory contents ==="
          ls -la
          echo "=== Looking for workflow-outputs directory ==="
          if [ -d "workflow-outputs" ]; then
            echo "Found workflow-outputs directory:"
            ls -la workflow-outputs/
          else
            echo "No workflow-outputs directory found"
          fi
          echo "=== Looking for individual files ==="
          find . -name "branch" -o -name "refspec" -o -name "url" | head -10

      - name: Create Unified Workflow Outputs
        run: |
          set -euxo pipefail
          # All matrix jobs create identical outputs, so we can use any one
          # Just ensure the directory structure is correct
          if [ ! -d "workflow-outputs" ]; then
            echo "No workflow-outputs directory found, checking for files..."
            ls -la
            # If files are in root, create directory structure
            if [ -f "branch" ] && [ -f "refspec" ] && [ -f "url" ]; then
              echo "Found files in root, creating workflow-outputs directory"
              mkdir -p workflow-outputs
              cp branch refspec url workflow-outputs/
            else
              echo "Error: Expected workflow output files not found"
              echo "Available files:"
              ls -la
              exit 1
            fi
          fi

          echo "Final workflow-outputs contents:"
          ls -la workflow-outputs/
          echo "=== File contents ==="
          echo "branch: $(cat workflow-outputs/branch)"
          echo "refspec: $(cat workflow-outputs/refspec)"
          echo "url: $(cat workflow-outputs/url)"

      - name: Upload Unified Workflow Outputs
        uses: actions/upload-artifact@v4
        with:
          name: workflow-outputs
          path: workflow-outputs/
